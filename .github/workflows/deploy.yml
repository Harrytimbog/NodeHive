name: Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Generate .env files
        run: |
          echo "Generating .env files for build..."

          # Create .env for api-gateway
          mkdir -p api-gateway
          echo "PORT=${{ secrets.API_GATEWAY_PORT }}" > api-gateway/.env
          echo "NODE_ENV=production" >> api-gateway/.env
          echo "IDENTITY_SERVICE_URL=${{ secrets.API_GATEWAY_IDENTITY_SERVICE_URL }}" >> api-gateway/.env
          echo "POST_SERVICE_URL=${{ secrets.API_GATEWAY_POST_SERVICE_URL }}" >> api-gateway/.env
          echo "MEDIA_SERVICE_URL=${{ secrets.API_GATEWAY_MEDIA_SERVICE_URL }}" >> api-gateway/.env
          echo "SEARCH_SERVICE_URL=${{ secrets.API_GATEWAY_SEARCH_SERVICE_URL }}" >> api-gateway/.env
          echo "JWT_SECRET=${{ secrets.API_GATEWAY_JWT_SECRET }}" >> api-gateway/.env
          echo "RABBITMQ_URL=${{ secrets.API_GATEWAY_RABBITMQ_URL }}" >> api-gateway/.env
          echo "REDIS_URL=${{ secrets.API_GATEWAY_REDIS_URL }}" >> api-gateway/.env

          # Create .env for identity-service
          mkdir -p identity-service
          echo "PORT=${{ secrets.IDENTITY_SERVICE_PORT }}" > identity-service/.env
          echo "MONGODB_URI=${{ secrets.IDENTITY_SERVICE_MONGODB_URI }}" >> identity-service/.env
          echo "JWT_SECRET=${{ secrets.IDENTITY_SERVICE_JWT_SECRET }}" >> identity-service/.env
          echo "NODE_ENV=production" >> identity-service/.env
          echo "REDIS_URL=${{ secrets.IDENTITY_SERVICE_REDIS_URL }}" >> identity-service/.env
          echo "RABBITMQ_URL=${{ secrets.IDENTITY_SERVICE_RABBITMQ_URL }}" >> identity-service/.env

          # Create .env for post-service
          mkdir -p post-service
          echo "PORT=${{ secrets.POST_SERVICE_PORT }}" > post-service/.env
          echo "MONGODB_URI=${{ secrets.POST_SERVICE_MONGODB_URI }}" >> post-service/.env
          echo "JWT_SECRET=${{ secrets.POST_SERVICE_JWT_SECRET }}" >> post-service/.env
          echo "NODE_ENV=production" >> post-service/.env
          echo "REDIS_URL=${{ secrets.POST_SERVICE_REDIS_URL }}" >> post-service/.env
          echo "RABBITMQ_URL=${{ secrets.POST_SERVICE_RABBITMQ_URL }}" >> post-service/.env

          # Create .env for media-service
          mkdir -p media-service
          echo "PORT=${{ secrets.MEDIA_SERVICE_PORT }}" > media-service/.env
          echo "MONGODB_URI=${{ secrets.MEDIA_SERVICE_MONGODB_URI }}" >> media-service/.env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.MEDIA_SERVICE_CLOUDINARY_CLOUD_NAME }}" >> media-service/.env
          echo "CLOUDINARY_API_KEY=${{ secrets.MEDIA_SERVICE_CLOUDINARY_API_KEY }}" >> media-service/.env
          echo "CLOUDINARY_API_SECRET=${{ secrets.MEDIA_SERVICE_CLOUDINARY_API_SECRET }}" >> media-service/.env
          echo "NODE_ENV=production" >> media-service/.env
          echo "REDIS_URL=${{ secrets.MEDIA_SERVICE_REDIS_URL }}" >> media-service/.env
          echo "RABBITMQ_URL=${{ secrets.MEDIA_SERVICE_RABBITMQ_URL }}" >> media-service/.env

          # Create .env for search-service
          mkdir -p search-service
          echo "PORT=${{ secrets.SEARCH_SERVICE_PORT }}" > search-service/.env
          echo "MONGODB_URI=${{ secrets.SEARCH_SERVICE_MONGODB_URI }}" >> search-service/.env
          echo "JWT_SECRET=${{ secrets.SEARCH_SERVICE_JWT_SECRET }}" >> search-service/.env
          echo "NODE_ENV=production" >> search-service/.env
          echo "REDIS_URL=${{ secrets.SEARCH_SERVICE_REDIS_URL }}" >> search-service/.env
          echo "RABBITMQ_URL=${{ secrets.SEARCH_SERVICE_RABBITMQ_URL }}" >> search-service/.env

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add VPS SSH host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 46.202.195.200 >> ~/.ssh/known_hosts

      - name: Set up SSH key for authentication
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Transfer .env files to VPS
        run: |
          echo "Transferring .env files to VPS..."

          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r api-gateway/.env root@46.202.195.200:/home/harrytimbog/social-media-microservices/NodeHive/api-gateway/.env
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r media-service/.env root@46.202.195.200:/home/harrytimbog/social-media-microservices/NodeHive/media-service/.env
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r identity-service/.env root@46.202.195.200:/home/harrytimbog/social-media-microservices/NodeHive/identity-service/.env
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r post-service/.env root@46.202.195.200:/home/harrytimbog/social-media-microservices/NodeHive/post-service/.env
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r search-service/.env root@46.202.195.200:/home/harrytimbog/social-media-microservices/NodeHive/search-service/.env

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 46.202.195.200
          username: root
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/harrytimbog/social-media-microservices/NodeHive
            git pull origin master

            echo "Starting deployment process on VPS..."

            # Stop existing containers
            docker-compose down

            # Start containers with the updated configuration
            docker-compose up -d

      - name: Debug SSH connection (optional)
        run: |
          ssh -v -i ~/.ssh/id_rsa root@46.202.195.200 "echo 'SSH connection successful'"
        continue-on-error: true
